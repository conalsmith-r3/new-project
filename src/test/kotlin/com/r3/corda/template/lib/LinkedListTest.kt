/*
 * This source file was generated by the Gradle 'init' task
 */
package com.r3.corda.template.lib

import org.assertj.core.api.Assertions.assertThat
import org.assertj.core.api.Assertions.assertThatThrownBy
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.assertThrows

class LinkedListTest {

    @Test
    fun testConstructor() {
        val list = LinkedList()
        assertThat(list.size()).isEqualTo(0)
    }

    @Test
    fun testAdd() {
        val list = LinkedList()

        list.add(FIRST_ELEMENT)
        assertThat(list.size()).isEqualTo(1)
        assertThat(list.get(0)).isEqualTo(FIRST_ELEMENT)

        list.add(SECOND_ELEMENT)
        assertThat(list.size()).isEqualTo(2)
        assertThat(list.get(1)).isEqualTo(SECOND_ELEMENT)
    }

    @Test
    fun testAddMultipleElements() {
        val list = LinkedList()

        list.add(FIRST_ELEMENT)
        list.add(SECOND_ELEMENT)
        list.add(THIRD_ELEMENT)

        assertThat(list.size()).isEqualTo(3)
        assertThat(list.get(0)).isEqualTo(FIRST_ELEMENT)
        assertThat(list.get(1)).isEqualTo(SECOND_ELEMENT)
        assertThat(list.get(2)).isEqualTo(THIRD_ELEMENT)
    }

    @Test
    fun testGetWithInvalidIndex() {
        val list = LinkedList()

        list.add(FIRST_ELEMENT)
        list.add(SECOND_ELEMENT)

        assertThatThrownBy { list.get(2) }
            .isInstanceOf(IndexOutOfBoundsException::class.java)
            .hasMessage("Index is out of range")
    }

    @Test
    fun testGetWithIndexGreaterThanZero() {
        val list = LinkedList()

        list.add(FIRST_ELEMENT)
        list.add(SECOND_ELEMENT)
        list.add(THIRD_ELEMENT)

        // Access the element at index 1, which will trigger the loop in `get` method
        assertThat(list.get(1)).isEqualTo(SECOND_ELEMENT)

        // Access the element at index 2, which will also trigger the loop
        assertThat(list.get(2)).isEqualTo(THIRD_ELEMENT)
    }

    @Test
    fun testGetWithIndexGreaterThanZeroAndItemNull() {
        val list = LinkedList()

        list.add(FIRST_ELEMENT)
        list.add(SECOND_ELEMENT)
        list.add(THIRD_ELEMENT)

        // Access the element at index 4, which will trigger the loop in `get` method to reach the end of the list
        assertThrows<IndexOutOfBoundsException> {
            list.get(4)
        }
    }

    @Test
    fun testRemove() {
        val list = LinkedList()

        list.add(FIRST_ELEMENT)
        list.add(SECOND_ELEMENT)
        assertThat(list.remove(FIRST_ELEMENT)).isTrue()

        assertThat(list.size()).isEqualTo(1)
        assertThat(list.get(0)).isEqualTo(SECOND_ELEMENT)

        assertThat(list.remove(SECOND_ELEMENT)).isTrue()
        assertThat(list.size()).isEqualTo(0)
    }

    @Test
    fun testRemoveMissing() {
        val list = LinkedList()

        list.add(FIRST_ELEMENT)
        list.add(SECOND_ELEMENT)

        assertThat(list.remove(THIRD_ELEMENT)).isFalse()
        assertThat(list.size()).isEqualTo(2)
    }

    @Test
    fun testRemoveMiddleElementTriggersPreviousItNextAssignment() {
        val list = LinkedList()

        list.add(FIRST_ELEMENT)
        list.add(SECOND_ELEMENT)
        list.add(THIRD_ELEMENT)

        // Remove the middle element "two"
        assertThat(list.remove(SECOND_ELEMENT)).isTrue()

        // Ensure that the list is properly linked after the removal
        assertThat(list.size()).isEqualTo(2)
        assertThat(list.get(0)).isEqualTo(FIRST_ELEMENT)
        assertThat(list.get(1)).isEqualTo(THIRD_ELEMENT)
    }

    @Test
    fun testRemoveTailElement() {
        val list = LinkedList()

        list.add(FIRST_ELEMENT)
        list.add(SECOND_ELEMENT)
        list.add(THIRD_ELEMENT)

        assertThat(list.remove(THIRD_ELEMENT)).isTrue()
        assertThat(list.size()).isEqualTo(2)
        assertThat(list.get(0)).isEqualTo(FIRST_ELEMENT)
        assertThat(list.get(1)).isEqualTo(SECOND_ELEMENT)
    }

    @Test
    fun testRemoveOnlyElement() {
        val list = LinkedList()

        list.add("only")

        assertThat(list.remove("only")).isTrue()
        assertThat(list.size()).isEqualTo(0)
    }

    @Test
    fun testRemoveMiddleElement() {
        val list = LinkedList()

        list.add(FIRST_ELEMENT)
        list.add(SECOND_ELEMENT)
        list.add(THIRD_ELEMENT)

        assertThat(list.remove(SECOND_ELEMENT)).isTrue()
        assertThat(list.size()).isEqualTo(2)
        assertThat(list.get(0)).isEqualTo(FIRST_ELEMENT)
        assertThat(list.get(1)).isEqualTo(THIRD_ELEMENT)
    }

    @Test
    fun testRemoveFromEmptyList() {
        val list = LinkedList()

        assertThat(list.remove("non-existent")).isFalse()
        assertThat(list.size()).isEqualTo(0)
    }

    @Test
    fun testSizeOnEmptyList() {
        val list = LinkedList()
        assertThat(list.size()).isEqualTo(0)
    }

    private companion object {
        private const val FIRST_ELEMENT = "one"
        private const val SECOND_ELEMENT = "two"
        private const val THIRD_ELEMENT = "three"
    }
}
